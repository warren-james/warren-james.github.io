library(tidyverse)
library(brms)
# A simpson's paradox example
df_treat <- tibble(Sex = rep(c("Male", "Female"), each = c(87 + 270, 192 + 80)))
# A simpson's paradox example
df_treat <- tibble(Sex = rep(c("Male", "Female"), c(87 + 270, 192 + 80)))
# A simpson's paradox example
df_treat <- tibble(Sex = rep(c("Male", "Female"), c(87 + 270, 263 + 80)))
# A simpson's paradox example
df_treat <- tibble(Sex = rep(c("Male", "Female"), c(87 + 270, 263 + 80)),
tookDrug = rep(c(1, 0, 1, 0), c(87, 270, 263, 80)))
# A simpson's paradox example
df_treat <- tibble(Sex      = rep(c("Male",   "Female"),
c(87 + 270,  263 + 80)),
tookDrug = rep(c(1,  0,   1,   0),
c(87, 270, 263, 80)),
recover  = rep(c(1,  0,       1,   0,         1,   0,         1,  0),
c(81, 87 - 81, 234, 270 - 234, 192, 263 - 192, 55, 80 - 55)))
df_treat %>%
group_by(Sex, tookDrug, recover) %>%
summarise(n = n())
m1 <- brm(recover ~ tookDrug,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m2 <- brm(recover ~ tookDrug + Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m3 <- brm(recover ~ tookDrug * Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
summary(m1)
summary(m2)
summary(m3)
loo_compare(loo(m1), loo(m2), loo(m3))
library(tidyverse)
library(brms)
# A simpson's paradox example
df_treat <- tibble(Sex      = rep(c("Male",   "Female"),
c(87 + 270,  263 + 80)),
tookDrug = rep(c("yes", "no", "yes", "no"),
c( 87,    270,  263,   80)),
recover  = rep(c(1,  0,       1,   0,         1,   0,         1,  0),
c(81, 87 - 81, 234, 270 - 234, 192, 263 - 192, 55, 80 - 55)))
m1 <- brm(recover ~ tookDrug,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m2 <- brm(recover ~ tookDrug + Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m3 <- brm(recover ~ tookDrug * Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
summary(m1)
summary(m2)
summary(m3)
exp(1.08)
exp(.2)
exp(.2 + 1.08 + .6)
loo_compare(loo(m1), loo(m2), loo(m3))
pp_check(m2, type = "loo_intervals")
plot(marginal_effects(m1))
plot(conditional_effecs(m1))
plot(conditional_effects(m1))
plot(conditional_effects(m2))
plot(conditional_effects(m3))
pp_check(m3)
pp_check(m2)
pp_check(m1)
library(tidyverse)
library(brms)
# A simpson's paradox example
df_treat <- tibble(Sex      = rep(c("Male",   "Female"),
c(87 + 270,  263 + 80)),
tookDrug = rep(c("yes", "no", "yes", "no"),
c( 87,    270,  263,   80)),
recover  = rep(c(1,  0,       1,   0,         1,   0,         1,  0),
c(81, 87 - 81, 234, 270 - 234, 192, 263 - 192, 55, 80 - 55)))
m1 <- brm(recover ~ tookDrug,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m2 <- brm(recover ~ Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m3 <- brm(recover ~ tookDrug + Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
m4 <- brm(recover ~ tookDrug * Sex,
family = "bernoulli",
data = df_treat,
chains = 1,
iter = 2000)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
loo_compare(loo(m1), loo(m2), loo(m3), loo(m4))
df_treat %>%
group_by(tookDrug, recover) %>%
summarise(n = n())
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n())
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0((n/total * 100, "%", "(", n, " / ", total, ")")))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0((n/total * 100), "%", "(", n, " / ", total, ")")))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0((n/total * 100), "%", "(", n, " / ", total, ")"))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0(round(n/total * 100, 2), "%", "(", n, " / ", total, ")"))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0(round(n/total * 100, 2), "%", " (", n, " / ", total, ")"))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0(format(round(n/total * 100, 2), nsmall = 2), "%", " (", n, " / ", total, ")"))
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0(format(round(n/total * 100, 2), nsmall = 2), "%", " (", n, " / ", total, ")")) %>%
spread(tookDrug, label)
df_treat %>%
group_by(tookDrug, Sex, recover) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(tookDrug, Sex) %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(label = paste0(format(round(n/total * 100, 2), nsmall = 2), "%", " (", n, " / ", total, ")")) %>%
select(-c(n, total)) %>% spread(tookDrug, label)
rm(list = ls())
dir.create("about")
dir.create("supMat")
dir.create("supMat/2024_06_IdentifyingKeySystemComponents")
dir.create("supMat/2024_06_IdentifyingKeySystemComponents/data")
dir.create("supMat/2024_06_IdentifyingKeySystemComponents/Surveys")
dir.create("functions")
library(tidyverse) # data processing
library(tidybayes) # for tidy format model draws
library(brms)      # Bayesian regression
library(see)       # prettier colour schemes
# set the theme
theme_set(theme_bw())
df_readmission <- tibble(Group = rep(c("Home", "Ward"), c(24, 27)),
readmit = c(rep(c(1, 0), c(2, 22)), rep(c(1, 0), c(1, 26)))) %>%
mutate(Group = factor(Group, levels = c("Ward", "Home")))
df_fisher <- df_readmission %>%
group_by(Group) %>%
summarise(totalNoReadmit = n() - sum(readmit),
totalReadmit = sum(readmit))
# Needs to be a matrix for the fisher.test function...
matrix_fisher <- as.matrix(df_fisher %>% select(totalNoReadmit, totalReadmit))
dimnames(matrix_fisher)[[1]] <- c("Ward", "Home")
fisherResults <- fisher.test(matrix_fisher)
fisherResults
#| label: fig-betaDist
#| fig-cap: "This figure shows the likelihood of various values that could have produced the observed data."
x <- seq(0, .3, length.out = 100)
df_beta <- df_fisher %>%
expand_grid(tibble(x = x)) %>%
mutate(dens = dbeta(x, totalReadmit, totalNoReadmit))
df_beta %>%
ggplot(aes(x, dens, colour = Group)) +
geom_path()
m_defaultPriors <- brm(readmit ~ Group,
data = df_readmission,
chains = 1,
family = "bernoulli",
sample_prior = T)
# show model summary
summary(m_defaultPriors)
# quick function as we'll be doing this again
myOddsRatio <- function(thisModel){
as_draws_df(thisModel) %>%
select(b_GroupHome) %>%
mean_hdci(b_GroupHome) %>%
mutate(across(1:3, ~exp(.x)))
}
myOddsRatio(m_defaultPriors)
library(tidyverse) # data processing
library(tidybayes) # for tidy format model draws
library(brms)      # Bayesian regression
library(see)       # prettier colour schemes
# set the theme
theme_set(theme_bw())
# for reproducibility
set.seed(970431)
df_readmission <- tibble(Group = rep(c("Home", "Ward"), c(24, 27)),
readmit = c(rep(c(1, 0), c(2, 22)), rep(c(1, 0), c(1, 26)))) %>%
mutate(Group = factor(Group, levels = c("Ward", "Home")))
df_fisher <- df_readmission %>%
group_by(Group) %>%
summarise(totalNoReadmit = n() - sum(readmit),
totalReadmit = sum(readmit))
# Needs to be a matrix for the fisher.test function...
matrix_fisher <- as.matrix(df_fisher %>% select(totalNoReadmit, totalReadmit))
dimnames(matrix_fisher)[[1]] <- c("Ward", "Home")
fisherResults <- fisher.test(matrix_fisher)
fisherResults
#| label: fig-betaDist
#| fig-cap: "This figure shows the likelihood of various values that could have produced the observed data."
x <- seq(0, .3, length.out = 100)
df_beta <- df_fisher %>%
expand_grid(tibble(x = x)) %>%
mutate(dens = dbeta(x, totalReadmit, totalNoReadmit))
df_beta %>%
ggplot(aes(x, dens, colour = Group)) +
geom_path()
m_defaultPriors <- brm(readmit ~ Group,
data = df_readmission,
chains = 1,
family = "bernoulli",
sample_prior = T,
seed = 987421)
# show model summary
summary(m_defaultPriors)
head(df_fisher)
fisherResults$conf.int
fisherResults$conf.int[1]
fisherResults$conf.int[2]
fixef(m_defaultPriors)
fisherResults$estimate
fixef(m_defaultPriors)$Estimate
fixef(m_defaultPriors)[1,1]
fixef(m_defaultPriors)[1,2]
fixef(m_defaultPriors)[2,1]
fixef(m_defaultPriors)[2, 1]
fixef(m_defaultPriors)[2, 2]
fixef(m_defaultPriors)[2, 3]
tibble(
testType = c("Fisher",
"Bayes_defaultPriors"),
mu       = c(fisherResults$estimate,
exp(fixef(m_defaultPriors)[2, 1])),
.lower   = c(fisherResults$conf.int[1],
exp(fixef(m_defaultPriors)[2, 3])),
.upper   = c(fisherResults$conf.int[2],
exp(fixef(m_defaultPriors)[2, 4]))
)
exp(-1.44)
# quick function as we'll be doing this again
myOddsRatio <- function(thisModel){
as_draws_df(thisModel) %>%
select(b_GroupHome) %>%
mean_hdci(b_GroupHome, .width = c(.95)) %>%
mutate(across(1:3, ~exp(.x)))
}
myOddsRatio(m_defaultPriors)
df_comparison %>%
ggplot(aes(mu, testType, colour = testType)) +
geom_point()
#| fig-cap: "temp"
#| label: fig-compFisherBayes
#| code-fold: true
# setup dataset for use later
df_comparison <- tibble(
testType = c("Fisher",
"Bayes_defaultPriors"),
mu       = c(fisherResults$estimate,
exp(fixef(m_defaultPriors)[2, 1])),
.lower   = c(fisherResults$conf.int[1],
exp(fixef(m_defaultPriors)[2, 3])),
.upper   = c(fisherResults$conf.int[2],
exp(fixef(m_defaultPriors)[2, 4]))
)
df_comparison %>%
ggplot(aes(mu, testType, colour = testType)) +
geom_point()
??geom_linerange
?geom_linerange
df_comparison %>%
ggplot(aes(mu, testType, colour = testType)) +
geom_vline(xintercept = 1) +
geom_point() +
geom_linerange(aes(xmin = .lower, xmax = .upper))
df_comparison %>%
ggplot(aes(mu, testType, colour = testType)) +
geom_vline(xintercept = 1) +
geom_point() +
geom_linerange(aes(xmin = .lower, xmax = .upper)) +
scale_x_log10()
df_comparison %>%
ggplot(aes(mu, testType, colour = testType)) +
geom_vline(xintercept = 1) +
geom_point() +
geom_linerange(aes(xmin = .lower, xmax = .upper)) +
scale_x_log10("Ratio") +
scale_y_discrete("")
# The colours I used for any plots
myColours <- c("#c62828", "#283593", "#2e7d32", "#f9a825")
df_beta %>%
ggplot(aes(x, dens, colour = Group)) +
geom_path() +
scale_colour_manual(values = myColours)
df_comparison %>%
ggplot(aes(mu, testType, colour = testType)) +
geom_vline(xintercept = 1) +
geom_point() +
geom_linerange(aes(xmin = .lower, xmax = .upper)) +
scale_x_log10("Odds Ratio") +
scale_y_discrete("") +
scale_colour_manual(values = myColours)
get_prior(readmit ~ Group,
family = "bernoulli")
get_prior(readmit ~ Group,
data = df_fisher,
family = "bernoulli")
get_prior(readmit ~ Group,
data = df_readmission,
family = "bernoulli")
install.packages("brms")
rm(list = ls())
rm(list = ls())
install.packages("brms")
