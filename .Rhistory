genData(500, fakeParams = 10)
genData(500, fakeParams = 10) * c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
genData(500, fakeParams = 10) * rep(c(1,0,0,0,0,0,0,0,0,0,0,0), each = 500)
genData(500, fakeParams = 10) * rep(c(1,0,0,0,0,0,0,0,0,0,0,0), each = 500) %>% sum()
genData(500, fakeParams = 10) * rep(c(1,0,0,0,0,0,0,0,0,0,0,0), each = 500) %>% rowSums()
rowSums(genData(500, fakeParams = 10) * rep(c(1,0,0,0,0,0,0,0,0,0,0,0), each = 500))
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
xVals <- rnorm(N * (realParams + fakeParams))
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
coefs <- c(realCoefs, rep(0, fakeParams))
thisData$y <- rowSums(thisData * rep(coefs, each = N))
return(thisData)
}
genData(500, fakeParams = 10)
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rowSums(thisData * rep(coefs, each = N))
# return the data
return(thisData)
}
# create the dataset
df_horseshoe <- genData(500, fakeParams = 10)
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"))
library(brms)
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"),
chains = 1)
summary(m)
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rnorm(N, rowSums(thisData * rep(coefs, each = N), 2))
# return the data
return(thisData)
}
# create the dataset
df_horseshoe <- genData(500, fakeParams = 10)
View(df_horseshoe)
df_horseshoe %>%
ggplot(aes(real_1, y)) +
geom_point()
df_horseshoe %>%
ggplot(aes(fake_1, y)) +
geom_point()
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"),
chains = 1)
summary(m)
# create the dataset
df_horseshoe <- genData(500, realParams = 2, fakeParams = 10, realCoefs = c(.5, -.8))
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"),
chains = 1)
summary(m)
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
# prior = set_prior(horseshoe(), class = "b"),
chains = 1)
summary(m)
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rnorm(N,
rowSums(thisData * rnorm(N * (realParams + fakeParams),
rep(coefs, each = N), .5),
2))
# return the data
return(thisData)
}
# create the dataset
df_horseshoe <- genData(500, realParams = 2, fakeParams = 10, realCoefs = c(.5, -.8))
View(df_horseshoe)
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
# prior = set_prior(horseshoe(), class = "b"),
chains = 1)
summary(m)
# create the dataset
df_horseshoe <- genData(500, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
# run the model
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
# prior = set_prior(horseshoe(), class = "b"),
chains = 1)
summary(m)
as_draws_df(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(-c(b_Intercept, .chain, .draw)) %>%
head()
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
head()
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef")
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real"), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType)) +
ggridges::geom_density_ridges(alpha = .3)
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType)) +
ggridges::geom_density_ridges(alpha = .3)
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType)) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent")
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType, colour = ParamType)) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent") +
tidybayes::stat_pointinterval() +
see::scale_fill_flat() +
see::scale_colour_flat()
}
plotModel(m)
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType, colour = ParamType)) +
geom_vline(xintercept = 0) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent") +
tidybayes::stat_pointinterval() +
see::scale_fill_flat() +
see::scale_colour_flat()
}
plotModel(m)
fitmodel <- \(thisData) {
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"),
chains = 1)
return(m)
}
wrapperFunction <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)){
thisData  <- genData(N, realParams, fakeParams, realCoefs)
thisModel <- fitModel(thisData)
thisPlot  <- plotModel(thisModel)
print(summary(thisModel))
return(list(data  = thisData,
model = thisModel,
plot  = thisPlot))
}
wrapperFunction(500, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
# Script looking at how to do some variable selection using horseshoe priors
library(tidyverse)
library(brms)
# setup the dataset
# we'll need a lot of points in order for this to work
# but I'll keep all the predictors really simple
# They'll all be continuous and we'll maybe have 2 or so values that matter
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rnorm(N,
rowSums(thisData * rnorm(N * (realParams + fakeParams),
rep(coefs, each = N), .5),
2))
# return the data
return(thisData)
}
fitmodel <- \(thisData) {
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"),
chains = 1)
return(m)
}
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType, colour = ParamType)) +
geom_vline(xintercept = 0) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent") +
tidybayes::stat_pointinterval() +
see::scale_fill_flat() +
see::scale_colour_flat()
}
wrapperFunction <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)){
thisData  <- genData(N, realParams, fakeParams, realCoefs)
thisModel <- fitModel(thisData)
thisPlot  <- plotModel(thisModel)
print(summary(thisModel))
return(list(data  = thisData,
model = thisModel,
plot  = thisPlot))
}
wrapperFunction(500, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
wrapperFunction <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)){
thisData  <- genData(N, realParams, fakeParams, realCoefs)
thisModel <- fitmodel(thisData)
thisPlot  <- plotModel(thisModel)
print(summary(thisModel))
return(list(data  = thisData,
model = thisModel,
plot  = thisPlot))
}
wrapperFunction(500, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
# Script looking at how to do some variable selection using horseshoe priors
library(tidyverse)
library(brms)
# setup the dataset
# we'll need a lot of points in order for this to work
# but I'll keep all the predictors really simple
# They'll all be continuous and we'll maybe have 2 or so values that matter
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rnorm(N,
rowSums(thisData * rnorm(N * (realParams + fakeParams),
rep(coefs, each = N), .1),
2))
# return the data
return(thisData)
}
fitmodel <- \(thisData) {
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(), class = "b"),
chains = 1)
return(m)
}
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType, colour = ParamType)) +
geom_vline(xintercept = 0) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent") +
tidybayes::stat_pointinterval() +
see::scale_fill_flat() +
see::scale_colour_flat()
}
wrapperFunction <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)){
thisData  <- genData(N, realParams, fakeParams, realCoefs)
thisModel <- fitmodel(thisData)
thisPlot  <- plotModel(thisModel)
print(summary(thisModel))
return(list(data  = thisData,
model = thisModel,
plot  = thisPlot))
}
wrapperFunction(500, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
wrapperFunction(1000, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
# Script looking at how to do some variable selection using horseshoe priors
library(tidyverse)
library(brms)
# setup the dataset
# we'll need a lot of points in order for this to work
# but I'll keep all the predictors really simple
# They'll all be continuous and we'll maybe have 2 or so values that matter
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rnorm(N,
rowSums(thisData * rnorm(N * (realParams + fakeParams),
rep(coefs, each = N), .1),
2))
# return the data
return(thisData)
}
fitmodel <- \(thisData) {
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(df = 3), class = "b"),
chains = 1)
return(m)
}
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType, colour = ParamType)) +
geom_vline(xintercept = 0) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent") +
tidybayes::stat_pointinterval() +
see::scale_fill_flat() +
see::scale_colour_flat()
}
wrapperFunction <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)){
thisData  <- genData(N, realParams, fakeParams, realCoefs)
thisModel <- fitmodel(thisData)
thisPlot  <- plotModel(thisModel)
print(summary(thisModel))
return(list(data  = thisData,
model = thisModel,
plot  = thisPlot))
}
wrapperFunction(1000, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
# Script looking at how to do some variable selection using horseshoe priors
library(tidyverse)
library(brms)
# setup the dataset
# we'll need a lot of points in order for this to work
# but I'll keep all the predictors really simple
# They'll all be continuous and we'll maybe have 2 or so values that matter
genData <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)) {
# check we have enough coefficients for the real params
if(length(realCoefs) != realParams){
stop("you need to specify the right number of coeficients for the paramaters you want")
}
# generate some random values
xVals <- rnorm(N * (realParams + fakeParams))
# make the dataset
thisData <- matrix(xVals, nrow = N, ncol = realParams + fakeParams) %>%
as_tibble()
# sort out the column names to be a bit more meaningful
colnames(thisData) <- c(paste("real", 1:realParams, sep = "_"), paste("fake", 1:fakeParams, sep = "_"))
# create a vector for the coefficients
coefs <- c(realCoefs, rep(0, fakeParams))
# creat the output measure
thisData$y <- rnorm(N,
rowSums(thisData * rnorm(N * (realParams + fakeParams),
rep(coefs, each = N), .1),
2))
# return the data
return(thisData)
}
fitmodel <- \(thisData) {
m <- brm(y ~ .,
data = df_horseshoe,
family = "gaussian",
prior = set_prior(horseshoe(df = 1, scale_global = .5), class = "b"),
chains = 1)
return(m)
}
plotModel <- \(thisM){
as_draws_df(thisM) %>%
select(starts_with("b_fake"), starts_with("b_real")) %>%
rowid_to_column(var = "iter") %>%
gather(2:ncol(.),
key = "param",
value = "coef") %>%
mutate(ParamType = ifelse(grepl("real", param), "Real", "Fake")) %>%
ggplot(aes(coef, param, fill = ParamType, colour = ParamType)) +
geom_vline(xintercept = 0) +
ggridges::geom_density_ridges(alpha = .3, colour = "transparent") +
tidybayes::stat_pointinterval() +
see::scale_fill_flat() +
see::scale_colour_flat()
}
wrapperFunction <- \(N, realParams = 1, fakeParams = 3, realCoefs = c(1)){
thisData  <- genData(N, realParams, fakeParams, realCoefs)
thisModel <- fitmodel(thisData)
thisPlot  <- plotModel(thisModel)
print(summary(thisModel))
return(list(data  = thisData,
model = thisModel,
plot  = thisPlot))
}
wrapperFunction(1000, realParams = 2, fakeParams = 10, realCoefs = c(.2, -.8))
